# src/main_flet.py

# --------------------------------------------------------------------------------------------------
# Importa√ß√£o de Bibliotecas Essenciais
# --------------------------------------------------------------------------------------------------
import flet as ft  # Framework principal para a constru√ß√£o da interface gr√°fica.
import logging  # Para registrar eventos e facilitar a depura√ß√£o.
import os  # Para interagir com o sistema operacional, como obter caminhos de arquivos.
import cv2  # OpenCV para manipula√ß√£o de v√≠deo e imagem.
import base64  # Para codificar imagens para exibi√ß√£o no Flet.
import threading  # Para executar a an√°lise de v√≠deo em uma thread separada e n√£o travar a UI.
import sys  # Para manipular o path do sistema e permitir importa√ß√µes de outros diret√≥rios.

# --- Adiciona o diret√≥rio raiz do projeto ao path para garantir que as importa√ß√µes funcionem ---
# Zen of Python: "Flat is better than nested." - Simplifica a estrutura de importa√ß√£o.
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

# --- Importa√ß√£o dos M√≥dulos do Projeto ---
from src.utils import (
    setup_logging,
    get_logger,
)  # Fun√ß√µes utilit√°rias, incluindo nosso logger.
from src.video_analyzer import (
    VideoAnalyzer,
)  # Classe principal para a l√≥gica de an√°lise.

# Plotly √© usado para os gr√°ficos, embora a l√≥gica principal do gr√°fico n√£o esteja neste arquivo.
from flet.plotly_chart import PlotlyChart
import plotly.graph_objects as go

# --------------------------------------------------------------------------------------------------
# Configura√ß√£o Inicial
# --------------------------------------------------------------------------------------------------
# Configura e obt√©m uma inst√¢ncia do logger para este arquivo.
setup_logging()
logger = get_logger(__name__)


# --------------------------------------------------------------------------------------------------
# Classe Principal da Aplica√ß√£o Flet
# --------------------------------------------------------------------------------------------------
class KravMagaApp:
    """
    Classe que encapsula toda a l√≥gica e a interface do usu√°rio da aplica√ß√£o.
    Zen of Python: "Encapsulation is a good thing." (Implicitamente)
    """

    def __init__(self, page: ft.Page):
        """
        Inicializador da classe da aplica√ß√£o.

        Args:
            page (ft.Page): O objeto da p√°gina principal fornecido pelo Flet.
        """
        self.page = page
        self.video_analyzer = None  # Ser√° instanciado ap√≥s o upload dos v√≠deos.

        # --- CORRE√á√ÉO PRINCIPAL: Inicializa todos os controles da UI como atributos da classe ---
        # Isso garante que eles possam ser acessados de qualquer m√©todo da classe usando 'self'.
        self.status_text = ft.Text(
            "Por favor, carregue ambos os v√≠deos para iniciar a an√°lise.",
            text_align=ft.TextAlign.CENTER,
        )
        self.analyze_button = ft.ElevatedButton(
            "Analisar Movimentos",
            icon=ft.icons.ANALYTICS,
            on_click=self.analyze_videos,
            disabled=True,
        )
        self.img_aluno_control = ft.Image(
            fit=ft.ImageFit.CONTAIN, expand=True, src_base64=""
        )
        self.img_mestre_control = ft.Image(
            fit=ft.ImageFit.CONTAIN, expand=True, src_base64=""
        )
        self.slider_control = ft.Slider(
            min=0,
            max=0,
            divisions=1,
            value=0,
            expand=True,
            disabled=True,
            on_change=self.on_slider_change,
        )

        # Configura os seletores de arquivo (FilePickers).
        self.file_picker_aluno = ft.FilePicker(
            on_result=lambda e: self.pick_file_result(e, is_aluno=True)
        )
        self.file_picker_mestre = ft.FilePicker(
            on_result=lambda e: self.pick_file_result(e, is_aluno=False)
        )
        self.page.overlay.extend([self.file_picker_aluno, self.file_picker_mestre])

        # Constr√≥i o layout inicial.
        self.build_layout()
        logger.info("Aplica√ß√£o Flet e UI inicializadas com sucesso.")

    def build_layout(self):
        """
        Constr√≥i o layout visual da aplica√ß√£o, adicionando os controles √† p√°gina.
        """
        logger.info("Construindo o layout da UI...")
        self.page.title = "Analisador de Movimentos de Krav Maga"
        self.page.vertical_alignment = ft.MainAxisAlignment.START
        self.page.horizontal_alignment = ft.CrossAxisAlignment.CENTER
        self.page.scroll = ft.ScrollMode.ADAPTIVE

        self.page.add(
            ft.Column(
                [
                    ft.Text(
                        "Analisador de Movimentos de Krav Maga ü•ã",
                        size=28,
                        weight=ft.FontWeight.BOLD,
                    ),
                    ft.Row(
                        [
                            ft.ElevatedButton(
                                "Upload V√≠deo do Aluno",
                                icon=ft.icons.UPLOAD_FILE,
                                on_click=lambda _: self.file_picker_aluno.pick_files(
                                    allow_multiple=False,
                                    allowed_extensions=["mp4", "mov", "avi"],
                                ),
                            ),
                            ft.ElevatedButton(
                                "Upload V√≠deo do Mestre",
                                icon=ft.icons.UPLOAD_FILE,
                                on_click=lambda _: self.file_picker_mestre.pick_files(
                                    allow_multiple=False,
                                    allowed_extensions=["mp4", "mov", "avi"],
                                ),
                            ),
                            self.analyze_button,
                        ],
                        alignment=ft.MainAxisAlignment.CENTER,
                        spacing=20,
                    ),
                    ft.Container(content=self.status_text, padding=10),
                    ft.ResponsiveRow(
                        [
                            ft.Column(
                                [
                                    ft.Text(
                                        "V√≠deo do Aluno", weight=ft.FontWeight.BOLD
                                    ),
                                    self.img_aluno_control,
                                ],
                                col={"md": 6},
                                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                            ),
                            ft.Column(
                                [
                                    ft.Text(
                                        "V√≠deo do Mestre", weight=ft.FontWeight.BOLD
                                    ),
                                    self.img_mestre_control,
                                ],
                                col={"md": 6},
                                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                            ),
                        ],
                        alignment=ft.MainAxisAlignment.CENTER,
                    ),
                    self.slider_control,
                ],
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                spacing=15,
            )
        )
        logger.info("Layout da UI constru√≠do e adicionado √† p√°gina.")
        self.page.update()

    def pick_file_result(self, e: ft.FilePickerResultEvent, is_aluno: bool):
        """
        Manipulador de evento para quando um arquivo √© selecionado pelo usu√°rio.

        Args:
            e (ft.FilePickerResultEvent): O evento disparado pelo FilePicker.
            is_aluno (bool): Flag para identificar se o v√≠deo √© do aluno ou do mestre.
        """
        if not e.files:
            logger.warning(
                f"Sele√ß√£o de arquivo cancelada para {'aluno' if is_aluno else 'mestre'}."
            )
            return

        video_path = e.files[0].path

        # Armazena o caminho do arquivo no armazenamento do cliente do Flet (uma forma de guardar estado).
        storage_key = "video_aluno_path" if is_aluno else "video_mestre_path"
        self.page.client_storage.set(storage_key, video_path)
        logger.info(
            f"Caminho do v√≠deo {'aluno' if is_aluno else 'mestre'} salvo: {video_path}"
        )

        self.update_status_and_button_state()
        self.page.update()

    def update_status_and_button_state(self):
        """
        Verifica se ambos os v√≠deos foram carregados e atualiza o estado do bot√£o de an√°lise.
        """
        aluno_path = self.page.client_storage.get("video_aluno_path")
        mestre_path = self.page.client_storage.get("video_mestre_path")

        if aluno_path and mestre_path:
            # CORRE√á√ÉO: Acessa o bot√£o diretamente atrav√©s de 'self.analyze_button'.
            self.analyze_button.disabled = False
            self.status_text.value = "V√≠deos carregados. Pronto para analisar."
            logger.info(
                "Ambos os v√≠deos foram selecionados. Bot√£o de an√°lise habilitado."
            )
        elif aluno_path:
            self.status_text.value = (
                "V√≠deo do aluno carregado. Aguardando v√≠deo do mestre."
            )
        elif mestre_path:
            self.status_text.value = (
                "V√≠deo do mestre carregado. Aguardando v√≠deo do aluno."
            )

        self.page.update()

    def analyze_videos(self, e):
        """Inicia a an√°lise dos v√≠deos em uma thread para n√£o bloquear a UI."""
        logger.info("Bot√£o de an√°lise clicado. Iniciando processo.")
        self.status_text.value = "An√°lise em andamento, por favor aguarde..."
        # Desabilita o bot√£o para evitar cliques m√∫ltiplos durante a an√°lise.
        self.analyze_button.disabled = True
        self.page.update()

        aluno_path = self.page.client_storage.get("video_aluno_path")
        mestre_path = self.page.client_storage.get("video_mestre_path")

        # Cria uma nova inst√¢ncia do analisador para esta sess√£o de an√°lise.
        self.video_analyzer = VideoAnalyzer()
        # Carrega os v√≠deos a partir dos caminhos (a l√≥gica interna cria arquivos tempor√°rios).
        self.video_analyzer.load_video_from_bytes(
            open(aluno_path, "rb").read(), is_aluno=True
        )
        self.video_analyzer.load_video_from_bytes(
            open(mestre_path, "rb").read(), is_aluno=False
        )

        # Inicia a an√°lise em uma thread separada.
        threading.Thread(target=self.run_analysis_and_update_ui, daemon=True).start()

    def run_analysis_and_update_ui(self):
        """
        Fun√ß√£o que executa a an√°lise e, ao final, chama a atualiza√ß√£o da UI na thread principal.
        """
        # Este m√©todo bloqueia at√© que a an√°lise na thread do VideoAnalyzer termine.
        self.video_analyzer.analyze_and_compare()
        if self.video_analyzer.processing_thread:
            self.video_analyzer.processing_thread.join()

        logger.info("An√°lise na thread conclu√≠da. Agendando atualiza√ß√£o da UI.")
        # O Flet requer que as atualiza√ß√µes da UI sejam feitas a partir da thread principal.
        # self.page.run() agenda a execu√ß√£o da fun√ß√£o na thread correta.
        self.page.run(self.setup_ui_post_analysis)

    def setup_ui_post_analysis(self):
        """Configura a UI ap√≥s a conclus√£o da an√°lise."""
        logger.info("Configurando a UI para exibir os resultados da an√°lise.")
        num_frames = len(self.video_analyzer.aluno_landmarks)
        if num_frames > 0:
            self.slider_control.max = num_frames - 1
            self.slider_control.divisions = num_frames - 1 if num_frames > 1 else 1
            self.slider_control.disabled = False
            self.status_text.value = "An√°lise completa! Use o slider para navegar."
            self.update_frame_display(0)  # Exibe o primeiro frame.
        else:
            self.status_text.value = (
                "N√£o foi poss√≠vel extrair dados dos v√≠deos para an√°lise."
            )

        self.page.update()

    def on_slider_change(self, e):
        """Atualiza a exibi√ß√£o do frame quando o slider √© movido."""
        frame_index = int(e.control.value)
        logger.debug(f"Slider movido para o frame {frame_index}.")
        self.update_frame_display(frame_index)

    def update_frame_display(self, frame_index):
        """
        Busca os frames processados e os exibe na UI.

        Args:
            frame_index (int): O √≠ndice do frame a ser exibido.
        """
        if not self.video_analyzer:
            return

        # Para exibir os frames, precisamos l√™-los dos arquivos de v√≠deo novamente,
        # pois n√£o os armazenamos em mem√≥ria para economizar recursos.

        # L√≥gica para exibir frame do aluno
        if self.video_analyzer.cap_aluno.isOpened():
            self.video_analyzer.cap_aluno.set(cv2.CAP_PROP_POS_FRAMES, frame_index)
            ret, frame = self.video_analyzer.cap_aluno.read()
            if ret:
                results, annotated_image = (
                    self.video_analyzer.pose_estimator.estimate_pose(frame)
                )
                self.img_aluno_control.src_base64 = self.frame_to_base64(
                    annotated_image
                )

        # L√≥gica para exibir frame do mestre
        if self.video_analyzer.cap_mestre.isOpened():
            self.video_analyzer.cap_mestre.set(cv2.CAP_PROP_POS_FRAMES, frame_index)
            ret, frame = self.video_analyzer.cap_mestre.read()
            if ret:
                results, annotated_image = (
                    self.video_analyzer.pose_estimator.estimate_pose(frame)
                )
                self.img_mestre_control.src_base64 = self.frame_to_base64(
                    annotated_image
                )

        self.page.update()

    def frame_to_base64(self, frame):
        """Converte um frame do OpenCV para uma string base64 para exibi√ß√£o no Flet."""
        _, buffer = cv2.imencode(".png", frame)
        return base64.b64encode(buffer).decode("utf-8")


# --- Fun√ß√£o Principal ---
def main(page: ft.Page):
    """Fun√ß√£o de entrada que o Flet chama para iniciar a aplica√ß√£o."""
    logger.info("Iniciando a aplica√ß√£o Flet.")
    KravMagaApp(page)


# Ponto de entrada padr√£o para scripts Python.
if __name__ == "__main__":
    ft.app(target=main)
