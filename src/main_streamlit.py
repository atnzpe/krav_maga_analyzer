import streamlit as st
import logging
import os
import cv2
import numpy as np
import time
from src.video_analyzer import VideoAnalyzer
from src.utils import setup_logging

# Configura√ß√£o do logging usando a fun√ß√£o utilit√°ria.
logger = setup_logging()


def main():
    """
    Fun√ß√£o principal da aplica√ß√£o Streamlit.
    Esta fun√ß√£o configura a interface do usu√°rio e orquestra o fluxo principal.
    """
    logger.info("Iniciando a aplica√ß√£o Streamlit...")

    st.set_page_config(
        page_title="Analisador de Movimentos de Krav Maga (Streamlit)",
        layout="wide",
        initial_sidebar_state="expanded",
    )

    st.title("ü•ã Analisador de Movimentos de Krav Maga (Streamlit - Prot√≥tipo)")
    logger.info("T√≠tulo da aplica√ß√£o Streamlit exibido.")

    st.markdown(
        """
        Bem-vindo ao Analisador de Movimentos de Krav Maga!
        Esta √© a vers√£o de prot√≥tipo/web da ferramenta, utilizando Vis√£o Computacional (OpenCV e MediaPipe)
        para comparar seus movimentos com os de mestres, oferecendo feedback detalhado
        para aprimorar sua t√©cnica.
    """
    )
    logger.info("Descri√ß√£o da aplica√ß√£o Streamlit exibida.")

    st.header("Upload de V√≠deos")
    logger.info("Se√ß√£o de upload de v√≠deos iniciada.")

    video_aluno = st.file_uploader(
        "Selecione o v√≠deo do Aluno (MP4, MOV, AVI)",
        type=["mp4", "mov", "avi"],
        key="aluno_video_uploader",
    )
    logger.info(
        f"Widget de upload de v√≠deo do aluno criado. V√≠deo carregado: {video_aluno is not None}"
    )

    video_mestre = st.file_uploader(
        "Selecione o v√≠deo de Refer√™ncia do Mestre (MP4, MOV, AVI)",
        type=["mp4", "mov", "avi"],
        key="mestre_video_uploader",
    )
    logger.info(
        f"Widget de upload de v√≠deo do mestre criado. V√≠deo carregado: {video_mestre is not None}"
    )

    if video_aluno and video_mestre:
        st.success("Ambos os v√≠deos foram carregados com sucesso! üéâ")
        logger.info("Ambos os v√≠deos foram carregados. Pronto para an√°lise.")

        if st.button("Analisar Movimentos"):
            logger.info("Bot√£o 'Analisar Movimentos' clicado.")

            analyzer = VideoAnalyzer()

            st.info(
                "Iniciando a an√°lise dos v√≠deos. Isso pode levar alguns minutos, por favor aguarde..."
            )
            progress_bar = st.progress(0)
            status_text = st.empty()

            col1, col2 = st.columns(2)

            annotated_frames_aluno = []
            landmarks_aluno = []
            annotated_frames_mestre = []
            landmarks_mestre = []

            # --- Processamento do V√≠deo do Aluno ---
            status_text.text("Processando v√≠deo do Aluno...")
            logger.info("Iniciando processamento do v√≠deo do aluno.")
            try:
                # O m√©todo analyze_video retorna um gerador, processando frame a frame.
                for i, (frame, l_data) in enumerate(
                    analyzer.analyze_video(video_aluno)
                ):
                    annotated_frames_aluno.append(frame)
                    landmarks_aluno.append(l_data)
                    progress = min(int((i / 500) * 50), 49)
                    progress_bar.progress(progress)
                    if i % 50 == 0:
                        status_text.text(f"Processando v√≠deo do Aluno: Frame {i}...")

                progress_bar.progress(50)
                status_text.text(
                    "V√≠deo do Aluno processado. Iniciando v√≠deo do Mestre..."
                )
                logger.info("Processamento do v√≠deo do aluno conclu√≠do.")

                # --- Processamento do V√≠deo do Mestre ---
                logger.info("Iniciando processamento do v√≠deo do mestre.")
                for i, (frame, l_data) in enumerate(
                    analyzer.analyze_video(video_mestre)
                ):
                    annotated_frames_mestre.append(frame)
                    landmarks_mestre.append(l_data)
                    progress = min(50 + int((i / 500) * 50), 99)
                    progress_bar.progress(progress)
                    if i % 50 == 0:
                        status_text.text(f"Processando v√≠deo do Mestre: Frame {i}...")

                progress_bar.progress(100)
                status_text.text("Ambos os v√≠deos processados! Exibindo resultados...")
                logger.info(
                    "Processamento do v√≠deo do mestre conclu√≠do. An√°lise completa."
                )

                st.success("An√°lise de pose conclu√≠da! Exibindo v√≠deos processados. ‚ú®")

                # Exibe os v√≠deos processados (com landmarks).
                with col1:
                    st.write("### V√≠deo do Aluno (Com Detec√ß√£o de Pose)")
                    if annotated_frames_aluno:
                        st.image(
                            cv2.cvtColor(annotated_frames_aluno[0], cv2.COLOR_BGR2RGB),
                            caption="Primeiro frame do v√≠deo do Aluno com pose detectada.",
                            use_column_width=True,
                        )
                        st.markdown(
                            f"**Total de Frames Processados (Aluno):** {len(annotated_frames_aluno)}"
                        )
                        logger.info(
                            f"Primeiro frame do v√≠deo do aluno exibido. Total frames: {len(annotated_frames_aluno)}"
                        )
                    else:
                        st.warning("Nenhum frame processado para o v√≠deo do Aluno.")
                        logger.warning("Nenhum frame processado para o v√≠deo do Aluno.")

                with col2:
                    st.write("### V√≠deo do Mestre (Com Detec√ß√£o de Pose)")
                    if annotated_frames_mestre:
                        st.image(
                            cv2.cvtColor(annotated_frames_mestre[0], cv2.COLOR_BGR2RGB),
                            caption="Primeiro frame do v√≠deo do Mestre com pose detectada.",
                            use_column_width=True,
                        )
                        st.markdown(
                            f"**Total de Frames Processados (Mestre):** {len(annotated_frames_mestre)}"
                        )
                        logger.info(
                            f"Primeiro frame do v√≠deo do mestre exibido. Total frames: {len(annotated_frames_mestre)}"
                        )
                    else:
                        st.warning("Nenhum frame processado para o v√≠deo do Mestre.")
                        logger.warning(
                            "Nenhum frame processado para o v√≠deo do Mestre."
                        )

                st.session_state["landmarks_aluno"] = landmarks_aluno
                st.session_state["landmarks_mestre"] = landmarks_mestre
                logger.info("Landmarks de aluno e mestre armazenados em session_state.")

            except Exception as e:
                logger.error(
                    f"Erro durante o processamento do v√≠deo: {e}", exc_info=True
                )
                st.error(f"Ocorreu um erro durante a an√°lise do v√≠deo: {e}")
                status_text.text("Erro durante o processamento.")
            finally:
                if "analyzer" in locals() and analyzer is not None:
                    del analyzer

            st.subheader("Resultados da An√°lise e Feedback")
            st.write(
                "A compara√ß√£o detalhada dos movimentos e o feedback ser√£o exibidos aqui em breve."
            )
            logger.info("Se√ß√£o de resultados da an√°lise e feedback exibida.")

    else:
        st.warning("Por favor, carregue ambos os v√≠deos para iniciar a an√°lise.")
        logger.info("Aguardando o upload de ambos os v√≠deos.")

    logger.info("Aplica√ß√£o Streamlit encerrando o ciclo principal.")


if __name__ == "__main__":
    main()
