import pytest
import streamlit as st
from streamlit.testing.v1 import AppTest
import os
import logging

# Configura√ß√£o de logging para os testes, para n√£o interferir com o logging da aplica√ß√£o.
logging.getLogger().setLevel(logging.CRITICAL)


# Teste b√°sico para verificar se a aplica√ß√£o Streamlit carrega sem erros.
def test_streamlit_app_loads():
    """
    Testa se a aplica√ß√£o Streamlit carrega e exibe o t√≠tulo principal.
    Este √© um teste de fuma√ßa para garantir que o Streamlit est√° configurado corretamente.
    """
    # Cria uma inst√¢ncia de AppTest para simular a execu√ß√£o da aplica√ß√£o.
    at = AppTest.from_file("src/main_streamlit.py", default_timeout=5)
    # Executa a aplica√ß√£o.
    at.run()

    # Verifica se a execu√ß√£o foi bem-sucedida (sem erros).
    assert (
        at.exception is None
    ), f"A aplica√ß√£o Streamlit falhou ao carregar: {at.exception}"
    # Verifica se o t√≠tulo principal esperado est√° presente na sa√≠da.
    assert (
        "Analisador de Movimentos de Krav Maga (Streamlit)" in at.title[0].body
    ), "T√≠tulo da aplica√ß√£o Streamlit n√£o encontrado."


# Teste para verificar o comportamento de upload de arquivos.
def test_streamlit_file_upload_message():
    """
    Testa se a mensagem de aviso √© exibida corretamente quando os v√≠deos n√£o s√£o carregados.
    """
    at = AppTest.from_file("src/main_streamlit.py", default_timeout=5)
    at.run()

    # Verifica se a mensagem de aviso √© exibida quando nenhum v√≠deo √© carregado.
    assert (
        "Por favor, carregue ambos os v√≠deos para iniciar a an√°lise."
        in at.warning[0].body
    ), "Mensagem de aviso de upload de v√≠deo n√£o encontrada."


# Teste para verificar a exibi√ß√£o da mensagem de sucesso ap√≥s o upload (simulado).
def test_streamlit_success_message_after_simulated_upload():
    """
    Testa se a mensagem de sucesso √© exibida quando ambos os v√≠deos s√£o "carregados" (simulados).
    """
    at = AppTest.from_file("src/main_streamlit.py", default_timeout=5)
    at.run(
        uploaded_file_manager={
            "aluno_video_uploader": b"dummy_video_data_aluno",
            "mestre_video_uploader": b"dummy_video_data_mestre",
        }
    )

    # Verifica se a mensagem de sucesso √© exibida.
    assert (
        "Ambos os v√≠deos foram carregados com sucesso! üéâ" in at.success[0].body
    ), "Mensagem de sucesso de upload de v√≠deo n√£o encontrada."


# Teste para verificar se o bot√£o "Analisar Movimentos" aparece ap√≥s o upload.
def test_streamlit_analyze_button_visibility_after_upload():
    """
    Testa se o bot√£o 'Analisar Movimentos' se torna vis√≠vel ap√≥s a simula√ß√£o de upload dos v√≠deos.
    """
    at = AppTest.from_file("src/main_streamlit.py", default_timeout=5)
    at.run(
        uploaded_file_manager={
            "aluno_video_uploader": b"dummy_video_data_aluno",
            "mestre_video_uploader": b"dummy_video_data_mestre",
        }
    )
    # Verifica se o bot√£o "Analisar Movimentos" existe.
    assert (
        at.button[0].label == "Analisar Movimentos"
    ), "Bot√£o 'Analisar Movimentos' n√£o encontrado."


# Teste para verificar a mensagem de funcionalidade em desenvolvimento ap√≥s clicar no bot√£o de an√°lise.
def test_streamlit_analysis_in_progress_message():
    """
    Testa se a mensagem de "funcionalidade em desenvolvimento" √© exibida
    ap√≥s clicar no bot√£o 'Analisar Movimentos'.
    """
    at = AppTest.from_file("src/main_streamlit.py", default_timeout=5)
    at.run(
        uploaded_file_manager={
            "aluno_video_uploader": b"dummy_video_data_aluno",
            "mestre_video_uploader": b"dummy_video_data_mestre",
        }
    )
    # Clica no bot√£o "Analisar Movimentos".
    at.button[0].click().run()

    # Verifica se a mensagem de informa√ß√£o sobre a an√°lise em desenvolvimento √© exibida.
    assert (
        "Iniciando a an√°lise dos v√≠deos. Isso pode levar alguns minutos, por favor aguarde..."
        in at.info[0].body
    ), "Mensagem de an√°lise em desenvolvimento n√£o encontrada."
